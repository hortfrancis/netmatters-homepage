// Set the background colour and darken it on hover in a consistent way for any colour
@mixin background-with-darken-on-hover($background-colour) {

    background-color: $background-colour;

    &:hover {
        background-color: darken($background-colour, 15%);
    }
}

// Used in the 'Services' section to reverse the background and text colours on hover
@mixin reverse-card-colours-on-hover($service-name) {

    $service-colour: map-get($services-colours, $service-name);

    $service-modifier-name: str-replace($service-name, ' ', '-');

    &.services__card--#{ $service-modifier-name } {

        &:hover {
            background-color: $service-colour;

            .services__card-heading {
                color: $white;
            }

            .services__card-description {
                color: $white;
            }

            .services__card-read-more-button {
                background-color: $white;
                color: $service-colour;
            }
        }
    }
}

// For handling media query syntax 
@mixin breakpoint($name) {
    @if map-has-key($breakpoints, $name) {
        @media (min-width: map-get($breakpoints, $name)) {
            @content;
        }
    }

    @else {
        @warn "Unknown breakpoint: #{$name}.";
    }
}

// Set appropriate container width for each breakpoint with one mixin
@mixin set-container-width-for-breakpoints() {

    // Default margin from vieport edge for narrow screens
    margin-left: 1rem;
    margin-right: 1rem;

    @media (min-width: map-get($breakpoints, narrow-to-medium)) {
        width: map-get($container-width, small);
        margin-left: auto;
        margin-right: auto;
    }

    @media (min-width: map-get($breakpoints, medium-to-wide)) {
        width: map-get($container-width, medium);
        margin-left: auto;
        margin-right: auto;
    }

    @media (min-width: map-get($breakpoints, wide-to-extra-wide)) {
        width: map-get($container-width, large);
        margin-left: auto;
        margin-right: auto;
    }
}